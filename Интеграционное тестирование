Уровень тестирования, который фокусируется на взаимодействии между компонентами или системами. 

Цели интеграционного тестирования

Интеграционное  тестирование  фокусируется  на  взаимодействии  между  компонентами  или системами. Цели интеграционного тестирования включают:
-Снижение риска
-Проверка,  соответствует  ли  функциональное  и  нефункциональное  поведение интерфейсов установленным проектным требованиям
-Повышение уверенности в качестве интерфейсов
-Обнаружение  дефектов  (которые  могут  быть  в  самих  интерфейсах  или  внутри компонентов или систем)
-Предотвращение пропуска дефектов на более высокие уровни тестирования
Как  и  при  компонентном  тестировании,  в  некоторых  случаях  автоматизированные регрессионные  интеграционные  тесты  поддерживают  уверенность  в  том,  что  изменения  не повредили существующие интерфейсы, компоненты или системы.В этой учебной программе описаны два разных уровня интеграционного тестирования, которые могут выполняться на тестовых объектах различного размера следующим образом:
-Компонентное  интеграционное  тестирование  фокусируется  на  взаимодействиях  и интерфейсах  между  интегрированными  компонентами.  Оно  выполняется  после компонентного и, как правило, автоматизируется. При итеративной и инкрементальной разработке  компонентное  интеграционное  тестирование  обычно  является  частью процесса непрерывной интеграции
-Системное  интеграционное  тестирование  фокусируется  на  взаимодействиях  и интерфейсах   между   системами,   пакетами   и   микросервисами.   Системное интеграционное тестирование также может охватывать взаимодействия и интерфейсы, предоставляемые сторонними организациями (например, веб-сервисы). В этом случае организация-разработчик  не  контролирует  внешние  интерфейсы,  которые  могут создавать  различные  сложности  для  тестирования  (например,  проверяя,  что блокирующие тесты дефекты устранены в коде сторонней организации, подготавливая тестовые  среды  и  т.  д.).  Системное  интеграционное  тестирование  может  быть выполнено  после  системного  тестирования  или  параллельно  с  выполняемыми активностями по системному тестированию (как в последовательной разработке, так и в итеративной и инкрементальной разработке)

Базис тестирования

Примеры рабочих продуктов, которые могут использоваться в качестве базиса тестирования для интеграционного тестирования, включают:
-Дизайн продукта и системы
-Диаграммы последовательности
-Спецификации интерфейса и протокола связи
-Сценарии использования системы
-Архитектура на уровне компонентов или системы
-Рабочие процессы
-Спецификации, описывающие внешние интерфейсы

Объекты тестирования

Типичными объектами тестирования при интеграционном тестировании являются:
-Подсистемы
-Базы данных
-Инфраструктура
-Интерфейсы
-Программные интерфейсы приложения (API)
-Микросервисы

Типичные дефектыи отказы

Примеры  типичных  дефектови  отказов  при  компонентном  интеграционном  тестировании включают:
-Некорректные данные, отсутствующие данные или неправильная кодировка данных
-Неверная  последовательность или  временные  характеристики  обращения  к интерфейсам
-Несовместимость интерфейсов
-Сбои связи между компонентами
-Необработанные или неправильно обработанные сбои связи между компонентами
-Неправильные  предположения  о  назначении,  единицах  или  границах  данных, передаваемых между компонентами
Примерами  типичных  дефектов  и  отказов  для  системного  интеграционного  тестирования являются:
-Несогласованные структуры сообщений между системами
-Некорректные данные, отсутствующие данные, или неправильная кодировка данных
-Несовместимость интерфейсов
-Сбои связи между системами
-Необработанные или неправильно обработанные сбои связи между системами
-Неправильные  предположения  о  значении,  единицах  или  границах  данных, передаваемых между системами
-Несоблюдение обязательных правил безопасности

Специфические подходы и зоны ответственности

Компонентные  интеграционные  и  системные  интеграционные  тесты  должны  быть сосредоточены на интеграции как таковой. Например, если интегрировать модуль Aс модулем B, тесты должны быть сосредоточены на связи между модулями, а не на функциональности отдельных  модулей,  поскольку  они  должны  быть  проверены  во  время  компонентного тестирования. Если интегрировать систему X с системой Y, тесты должны быть сосредоточены на связи между системами, а не на функцияхотдельных систем, поскольку они должны быть проверены во время системного тестирования. Для этого могут применяться функциональные, нефункциональные и структурные тесты.Компонентное  интеграционное  тестирование  часто  является  обязанностью  разработчиков.  Асистемное интеграционного тестирование, как правило, обязанность тестировщиков. В идеале тестировщики,  проводящие  системное  интеграционного  тестирование,  должны  понимать архитектуру системы и влиять на интеграционное планирование.Если интеграционные тесты и стратегия интеграции планируются до создания компонентов или систем,  эти  компоненты  или  системы  могут  быть  построены  в  порядке,  необходимом  для наиболее  эффективного  тестирования.  Стратегии  систематической  интеграции  могут основываться на архитектуре системы (например, сверху вниз и снизу вверх), функциональных задачах, последовательностях обработки транзакций или другом аспекте работы системы или компонентов.Чтобы  упростить  локализацию  дефектов  и  обнаруживать  их  на  раннем  этапе, интеграция  должна  обычно  быть  последовательной  (т.  е.  небольшое  количество дополнительных  компонентов  или  систем  за  раз),  а  не  методом  «большого  взрыва»  (т.  е. интеграция  всех  компонентов  или  систем  сразу).  Анализ  рисков  наиболее  сложных интерфейсов может помочь определить фокус интеграционного тестирования.
Чем  больше  объем  интеграции,  тем  труднее  становится  выявлять  дефекты  конкретного компонента  или  системы,  что  может  привести  к  увеличению  риска  и  увеличению  времени поиска  неисправностей.  Это  одна  из  причин  того,  что  непрерывная  интеграция,  когда программное  обеспечение  интегрируется  методом  «компонент  за  компонентом»  (т.е. функциональная  интеграция),  стала  обычной  практикой.  Такое  непрерывное  интегрирование часто  подразумевает  автоматическое  регрессионное  тестирование,  в  идеале  на  нескольких уровнях тестирования.

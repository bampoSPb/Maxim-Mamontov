Уровень тестирования, посвященный отдельным компонентам оборудования или программного обеспечения. 

Цели компонентного тестирования->

Компонентное тестирование (также известное как модульное тестирование) фокусируется на компонентах,  которые  могут  быть  проверены  отдельно.  Цели  компонентного  тестирования включают:
-Снижение риска
-Проверку,  соответствует  ли  функциональное  и  нефункциональное  поведение компонентов установленным проектным требованиям
-Укрепление уверенности в качестве компонента
-Обнаружение дефектов в компоненте
-Предотвращение пропуска дефектов на более высокие уровни тестирования.
В некоторых случаях, особенно в инкрементных и итеративных моделях разработки (например, гибкой   методологии   разработки),   где   изменения   кода   происходят   непрерывно, автоматизированные регрессионные  компонентные тесты  играют  ключевую роль в создании уверенности в том, что изменения не повредили существующий функционал.Компонентное  тестирование  часто  выполняется  изолированно  от  остальной  системы,  в зависимости от модели жизненного цикла разработки программного обеспечения и системы, для которой могут потребоваться макеты  разрабатываемых объектов, виртуализация служб, стенды, заглушки  и  драйверы.  Компонентное  тестирование  может  охватывать  как функциональные   (например,   правильность   вычислений),   так   и   нефункциональные характеристики  (например,  поиск  утечек  памяти)  и  структурные  свойства  (например, тестирование решений).Базис тестированияПримеры рабочих продуктов, которые могут использоваться в качестве базиса тестирования для компонентного тестирования, включают:
-Детальный дизайн
-Код
-Модель данных
-Спецификации компонента

Базис тестирования->

Примеры рабочих продуктов, которые могут использоваться в качестве базиса тестирования для компонентного тестирования, включают:
-Детальный дизайн
-Код
-Модель данных
-Спецификации компонента

Объекты тестирования->

Типичными объектами для компонентного тестирования являются:
-Компоненты, модули
-Код и структуры данных
-Классы
-Модули БД

Типичные дефекты и отказы->

Примеры типичных дефектов и отказов при компонентном тестировании включают:
-Неправильная  работа  функциональности  (например,  не  так,  как  описано  в спецификации)
-Проблемы с потоками данных
-Неправильные код и логика
Дефекты  обычно  исправляются,  как  только  они  обнаруживаются,  часто  без  оформления,  в соответствующей  системе  управления  дефектами.  Однако,  когда  разработчики  оформляют отчеты  о  дефектах,  создается  важная  информация  для  анализа  первопричин  дефектов  и улучшения процесса.

Специфические подходы и зоны ответственности->

Компонентное тестирование обычно выполняется разработчиком, который написал код, но это как минимум требует доступа к тестируемому коду. Разработчики могут чередовать разработку компонентов с обнаружением и устранением дефектов. Разработчики часто пишут и выполняют тесты после написания кода для компонента. Тем не менее, написание автоматизированных тестовых  сценариев  для  компонентов может  предшествовать  написанию  кода  приложения, особенно в методологии гибкой разработки.Например, рассмотрим разработку на основе тестов. Разработка на основе тестов является высоко  итеративной,  и  основана  на  циклах  разработки  автоматизированных  тестов, затем построении  и  интеграции  небольших  фрагментов  кода,  а  уже  после –выполнении компонентного  тестирования,  исправлении  проблем  и  рефакторинга  кода.  Этот  процесс продолжается  до  тех  пор,  пока  компонент  не  будет  полностью  собран  и  все  компонентные тесты не пройдут успешно. Разработка на основе тестов является примером подхода «сначала тестирование». Хотя разработка на основе тестов берет начало в методологии экстремального программирования, она распространилась на другие формы гибких методологий разработки, а также  на  последовательные  жизненные  циклы
